<engine port='5555'>
 <description>
  This is a simple example that has one source window and one compute
  window. The compute window uses expression to calculate the fields.

  engine element creates the single engine top level container which sets up
  dfESP fundamental services such as licensing, logging, pub/sub, ..
  This single engine instance wraps one or more projects, that wrap
  one or more continuous queries and different types of windows.
 </description>
 <projects>
  <project name='project' pubsub='auto' threads='1'>
   <description>
    This is to create a project. Project specifies a container
    that holds one or more continuous queries and are backed by a
    thread pool of user defined size. One can specify the pubsub
    port and type, number of threads for the project, index type
    and if using Tag Token data flow model.
   </description>
   <contqueries>
    <contquery name='contQuery' trace='computeWindow'>
     <description>
      This specifies the continuous query container that holds
      a collection of windows and enables one to specify the
      connectivity between windows. One can turn on tracing
      for a list of window and specifies the index type for
      windows in the query.
     </description>
     <windows>
      <window-source name='sourceWindow'>
       <description>
        This defines a source window. All event streams must
        enter continuous queries by being published or
        injected into a source window.
       </description>
       <schema>
        <fields>
         <field name='name' type='string'/>
         <field name='ID' type='int32' key='true'/>
         <field name='city' type='string'/>
        </fields>
       </schema>
       <connectors>
        <connector class='fs' name='publisher'>
         <properties>
          <property name='type'>pub</property>
          <property name='fstype'>csv</property>
          <property name='fsname'>input.csv</property>
          <property name='transactional'>true</property>
          <property name='blocksize'>1</property>
         </properties>
        </connector>
       </connectors>
      </window-source>
      <window-compute name='computeWindow'>
       <description>
        This is a compute window that uses expressions to
        calculate each field. The first two fields are just
        passing through what is in the input stream. The
        third field uses the expression function match_string
        which searches the input field "city" to find "Apex".
        If a match was found, true is returned otherwise,
        false is returned.
       </description>
       <schema>
        <fields>
         <field name='ID' type='int32' key='true'/>
         <field name='name' type='string'/>
         <field name='city' type='string'/>
         <field name='match' type='int32'/>
        </fields>
       </schema>
       <output>
        <field-expr>name</field-expr>
        <field-expr>city</field-expr>
        <field-expr>match_string(city, "Apex")</field-expr>
       </output>
      </window-compute>
     </windows>
     <edges>
      <description>
       This fully specifies the continuous query with window
       connectivity, which is a directed graph.
      </description>
      <edge source='sourceWindow' target='computeWindow'/>
     </edges>
    </contquery>
   </contqueries>
  </project>
 </projects>
</engine>

