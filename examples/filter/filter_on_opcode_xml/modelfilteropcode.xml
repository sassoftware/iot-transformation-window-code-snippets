<engine port='46666'>
 <description>
  This is a simple example that has one source window and one filter
  window. The filter window uses ESP_OPCODE to filter out all but Inserts.


  engine element creates the single engine top level container which sets up dfESP
  fundamental services such as licensing, logging, pub/sub, ...
  This single engine instance wraps one or more projects, that wrap
  one or more continuous queries and different types of windows.
 </description>
 <projects>
  <project name='projectfilteropcode' pubsub='auto' threads='1'>
   <description>
    This is to create a project. Project specifies a container
    that holds one or more continuous queries and are backed by a
    thread pool of user defined size. One can specify the pubsub
    port and type, number of threads for the project, index type
    and if using Tag Token data flow model.
   </description>
   <contqueries>
    <contquery name='contQuery' trace='filterWindow'>
     <description>
      This specifies the continuous query container that holds
      a collection of windows and enables one to specify the
      connectivity between windows. One can turn on tracing
      for a list of window and specifies the index type for
      windows in the query.

      This fully specifies the continuous query with window
      connectivity, which is a directed graph.
     </description>
     <windows>
      <window-source name='sourceWindow' index='pi_RBTREE'>
       <description>
        This defines a source window. All event streams must
        enter continuous queries by being published or
        injected into a source window.
       </description>
       <schema>
        <fields>
         <field name='ID' type='int64' key='true'/>
         <field name='symbol' type='string'/>
         <field name='price' type='money'/>
         <field name='quant' type='int32'/>
         <field name='vwap' type='double'/>
         <field name='trade_date' type='date'/>
         <field name='tstamp' type='stamp'/>
        </fields>
       </schema>
       <connectors>
        <connector class='fs' name='publisher'>
         <properties>
          <property name='type'>pub</property>
          <property name='fstype'>csv</property>
          <property name='fsname'>input.csv</property>
          <property name='transactional'>true</property>
          <property name='blocksize'>3</property>
          <property name='dateformat'>%Y-%m-%d %H:%M:%S</property>
         </properties>
        </connector>
       </connectors>
      </window-source>
      <window-filter name='filterWindow' index='pi_RBTREE'>
       <description>
        This is a filter window using OPCODE to filter out all
        but Inserts. Filter window has the same schema as the
        input window hence there is no schema defined for filter
        window.
       </description>
       <expression>ESP_OPCODE=="I"</expression>
       <connectors>
        <connector class='fs' name='subscriber'>
         <properties>
          <property name='type'>sub</property>
          <property name='fstype'>csv</property>
          <property name='fsname'>filter.out</property>
          <property name='snapshot'>true</property>
          <property name='dateformat'>%Y-%m-%d %H:%M:%S</property>
         </properties>
        </connector>
       </connectors>
      </window-filter>
     </windows>
     <edges>
      <edge source='sourceWindow' target='filterWindow'/>
     </edges>
    </contquery>
   </contqueries>
   <project-connectors>
    <connector-groups>
     <connector-group name='subGroup'>
      <connector-entry connector='contQuery/filterWindow/subscriber' state='running'/>
     </connector-group>
     <connector-group name='pubGroup'>
      <connector-entry connector='contQuery/sourceWindow/publisher' state='finished'/>
     </connector-group>
    </connector-groups>
    <edges>
     <edge source='subGroup' target='pubGroup'/>
    </edges>
   </project-connectors>
  </project>
 </projects>
</engine>

